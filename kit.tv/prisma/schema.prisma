// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String        @id @default(uuid())
  username       String        @unique
  imageUrl       String        @db.Text
  externalUserId String        @unique
  bio            String?       @db.Text
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  //followCount    Int           @default(0)
  activeStream   ActiveStream?
  following      Follow[]      @relation("Following")
  followedBy     Follow[]      @relation("FollowedBy")
  Button         Button[]
  ButtonQueue    ButtonQueue?
  blocking       Block[]       @relation("Blocking")
  blockedBy      Block[]       @relation("BlockedBy")

  stream Stream?
}

model Stream {
  id           String  @id @default(uuid())
  name         String? @db.Text
  thumbnailUrl String? @db.Text

  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelayed       Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
  @@fulltext([name])
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String
  follower    User   @relation(name: "Following", fields: [followerId], onDelete: Cascade, references: [id])
  following   User   @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(uuid())
  blockerId String
  blockedId String
  blocker   User   @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User   @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model ActiveStream {
  id           String   @id @default(uuid())
  title        String?  @db.Text
  category     String?  @db.Text
  streamUserId String   @unique
  streamer     User     @relation(fields: [streamUserId], references: [id])
  startTime    DateTime @default(now())
}

model Button {
  id           String       @id @default(uuid())
  text         String?      @db.Text
  font         String?      @db.Text
  size         Int          @default(16)
  color        Int          @default(0) //hex for black
  instructions String?      @db.Text
  credits      String?      @db.Text
  timeout      Int          @default(100)
  streamerId   String
  user         User         @relation(fields: [streamerId], references: [id])
  ButtonQueue  ButtonQueue?
  soundName    String?
}

model Sound {
  id      String   @id @default(uuid())
  fileName String   @db.Text
}

model ButtonQueue {
  id         String   @id @default(uuid())
  buttonId   String   @unique
  button     Button   @relation(fields: [buttonId], references: [id])
  timestamp  DateTime @default(now())
  streamerId String   @unique
  user       User     @relation(fields: [streamerId], references: [id])
}
